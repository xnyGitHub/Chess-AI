"""Event manager file"""  # pylint: disable=too-few-public-methods,super-init-not-called


class Event:
    """
    A superclass for any events that might be generated by an
    object and sent to the EventManager.
    """

    def __init__(self):
        """Constructor"""
        self.name: str = "Generic event"

    def __str__(self) -> str:
        """Return name with printed"""
        return self.name


class QuitEvent(Event):
    """Quit event."""

    def __init__(self):
        self.name: str = "Quit event"


class TickEvent(Event):
    """Tick event."""

    def __init__(self):
        self.name: str = "Tick event"


class ClickEvent(Event):
    """Click event."""

    def __init__(self, location: list):
        """
        Constructor for ClickEvent
        location:tuple = (y,x) which represent board squares
        """
        self.name: str = "Click event"
        self.location: list = location


class EventManager:
    """This object is responsible for coordinating most communication
    between the Model, View, and Controller."""

    def __init__(self):
        """Constructor"""
        # pylint: disable=import-outside-toplevel
        from weakref import WeakKeyDictionary

        # pylint: enable=import-outside-toplevel
        self.listeners: WeakKeyDictionary = WeakKeyDictionary()

    def register_listener(self, listener: object):
        """Register a listener to listen for events"""
        self.listeners[listener] = 1

    def unregister_listener(self, listener: object):
        """Remove a listener"""
        if listener in self.listeners.keys():
            del self.listeners[listener]

    def post(self, event: Event):
        """Function that notifies all listers of new event"""
        for listener in self.listeners.keys():
            # NOTE: If the weakref has died, it will be
            # automatically removed, so we don't have
            # to worry about it.
            listener.notify(event)
